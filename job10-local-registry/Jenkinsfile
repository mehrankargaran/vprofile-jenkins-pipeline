pipeline {
    agent any

    tools {
        maven 'MAVEN3'
        jdk 'OracleJDK17'
    }

    environment {
        REGISTRY = '192.168.2.29:5000'
        IMAGE_NAME = 'vprofile-app'
    }

    stages {
        stage('Cleanup Workspace') {
            steps { cleanWs() }
        }

        stage('Fetch Code') {
            steps {
                git branch: 'main', url: 'https://github.com/mehrankargaran/vprofile'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
            post { success { archiveArtifacts artifacts: '**/*.war', fingerprint: true } }
        }

        stage('Test') {
            steps { sh 'mvn test' }
        }

        stage('Checkstyle Analysis') {
            steps { sh 'mvn checkstyle:checkstyle' }
        }

        stage('SonarQube Analysis') {
            environment { scannerHome = tool 'sonar4.7' }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
${scannerHome}/bin/sonar-scanner \
-Dsonar.projectKey=vprofile \
-Dsonar.projectName=vprofile \
-Dsonar.projectVersion=1.0 \
-Dsonar.sources=src/ \
-Dsonar.java.binaries=target/classes \
-Dsonar.junit.reportsPath=target/surefire-reports/ \
-Dsonar.jacoco.reportsPath=target/jacoco.exec \
-Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
'''
                }
            }
        }

	stage('Quality Gate') {
            steps {
             timeout(time: 1, unit: 'HOURS') {
                script {
                 def qg = waitForQualityGate()
                 if (qg.status != 'OK') {
                    echo "‚ö†Ô∏è Quality Gate failed, but continuing pipeline..."
                         }
                       }
                     }
       	          }
   	 }
       
	 stage('Build Docker Image') {
            steps {
                script {
                    sh """
docker build -t ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} .
docker tag ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY}/${IMAGE_NAME}:latest
"""
                }
            }
        }

        stage('Push to Local Registry') {
            steps {
                script {
                    sh """
docker push ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}
docker push ${REGISTRY}/${IMAGE_NAME}:latest
"""
                }
            }
        }
    }

    post {
        success { echo "üéâ Job10 completed. Image pushed to ${REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}" }
        failure { echo "‚ùå Job10 failed. Check console output." }
    }
}
