pipeline {
    agent any

    tools {
        maven 'MAVEN3'
        jdk 'OracleJDK17'
    }

    environment {
        DOCKER_HUB_USER = 'mehrankargaran'
        IMAGE_NAME = 'vprofile-app'
    }

    stages {
        stage('Fetch code') {
            steps {
                git branch: 'main', url: 'https://github.com/mehrankargaran/vprofile'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean install -DskipTests'
            }
            post {
                success { archiveArtifacts artifacts: '**/*.war' }
            }
        }

        stage('Test') {
            steps { sh 'mvn test' }
        }

        stage('Checkstyle Analysis') {
            steps { sh 'mvn checkstyle:checkstyle' }
        }

        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
                JAVA_HOME = tool 'OracleJDK17'
                PATH = "${JAVA_HOME}/bin:${env.PATH}"
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
${scannerHome}/bin/sonar-scanner \
-Dsonar.projectKey=vprofile \
-Dsonar.projectName=vprofile \
-Dsonar.projectVersion=1.0 \
-Dsonar.sources=src/ \
-Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
-Dsonar.junit.reportsPath=target/surefire-reports/ \
-Dsonar.jacoco.reportsPath=target/jacoco.exec \
-Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
'''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_HUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-login', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
set -o pipefail
echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
docker push ${DOCKER_HUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER}
docker tag ${DOCKER_HUB_USER}/${IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_HUB_USER}/${IMAGE_NAME}:latest
docker push ${DOCKER_HUB_USER}/${IMAGE_NAME}:latest
'''
                }
            }
        }
    }

    post {
        success { echo "✅ Job9 finished OK" }
        failure { echo "❌ Job9 failed — check console" }
    }
}
